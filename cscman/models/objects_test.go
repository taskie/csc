// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testObjects(t *testing.T) {
	t.Parallel()

	query := Objects()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testObjectsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Objects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testObjectsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Objects().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Objects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testObjectsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ObjectSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Objects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testObjectsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ObjectExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Object exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ObjectExists to return true, but got false.")
	}
}

func testObjectsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	objectFound, err := FindObject(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if objectFound == nil {
		t.Error("want a record, got nil")
	}
}

func testObjectsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Objects().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testObjectsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Objects().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testObjectsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	objectOne := &Object{}
	objectTwo := &Object{}
	if err = randomize.Struct(seed, objectOne, objectDBTypes, false, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}
	if err = randomize.Struct(seed, objectTwo, objectDBTypes, false, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = objectOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = objectTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Objects().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testObjectsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	objectOne := &Object{}
	objectTwo := &Object{}
	if err = randomize.Struct(seed, objectOne, objectDBTypes, false, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}
	if err = randomize.Struct(seed, objectTwo, objectDBTypes, false, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = objectOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = objectTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Objects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func objectBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Object) error {
	*o = Object{}
	return nil
}

func objectAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Object) error {
	*o = Object{}
	return nil
}

func objectAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Object) error {
	*o = Object{}
	return nil
}

func objectBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Object) error {
	*o = Object{}
	return nil
}

func objectAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Object) error {
	*o = Object{}
	return nil
}

func objectBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Object) error {
	*o = Object{}
	return nil
}

func objectAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Object) error {
	*o = Object{}
	return nil
}

func objectBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Object) error {
	*o = Object{}
	return nil
}

func objectAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Object) error {
	*o = Object{}
	return nil
}

func testObjectsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Object{}
	o := &Object{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, objectDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Object object: %s", err)
	}

	AddObjectHook(boil.BeforeInsertHook, objectBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	objectBeforeInsertHooks = []ObjectHook{}

	AddObjectHook(boil.AfterInsertHook, objectAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	objectAfterInsertHooks = []ObjectHook{}

	AddObjectHook(boil.AfterSelectHook, objectAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	objectAfterSelectHooks = []ObjectHook{}

	AddObjectHook(boil.BeforeUpdateHook, objectBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	objectBeforeUpdateHooks = []ObjectHook{}

	AddObjectHook(boil.AfterUpdateHook, objectAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	objectAfterUpdateHooks = []ObjectHook{}

	AddObjectHook(boil.BeforeDeleteHook, objectBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	objectBeforeDeleteHooks = []ObjectHook{}

	AddObjectHook(boil.AfterDeleteHook, objectAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	objectAfterDeleteHooks = []ObjectHook{}

	AddObjectHook(boil.BeforeUpsertHook, objectBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	objectBeforeUpsertHooks = []ObjectHook{}

	AddObjectHook(boil.AfterUpsertHook, objectAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	objectAfterUpsertHooks = []ObjectHook{}
}

func testObjectsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Objects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testObjectsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(objectColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Objects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testObjectsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testObjectsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ObjectSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testObjectsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Objects().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	objectDBTypes = map[string]string{`ID`: `int`, `Namespace`: `varchar`, `Path`: `varchar`, `Type`: `varchar`, `Size`: `bigint`, `Mtime`: `datetime`, `Sha256`: `char`, `Status`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_             = bytes.MinRead
)

func testObjectsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(objectPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(objectAllColumns) == len(objectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Objects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, objectDBTypes, true, objectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testObjectsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(objectAllColumns) == len(objectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Object{}
	if err = randomize.Struct(seed, o, objectDBTypes, true, objectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Objects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, objectDBTypes, true, objectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(objectAllColumns, objectPrimaryKeyColumns) {
		fields = objectAllColumns
	} else {
		fields = strmangle.SetComplement(
			objectAllColumns,
			objectPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ObjectSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testObjectsUpsert(t *testing.T) {
	t.Parallel()

	if len(objectAllColumns) == len(objectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLObjectUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Object{}
	if err = randomize.Struct(seed, &o, objectDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Object: %s", err)
	}

	count, err := Objects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, objectDBTypes, false, objectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Object struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Object: %s", err)
	}

	count, err = Objects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
