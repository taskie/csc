// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Namespaces", testNamespaces)
	t.Run("Objects", testObjects)
}

func TestDelete(t *testing.T) {
	t.Run("Namespaces", testNamespacesDelete)
	t.Run("Objects", testObjectsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Namespaces", testNamespacesQueryDeleteAll)
	t.Run("Objects", testObjectsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Namespaces", testNamespacesSliceDeleteAll)
	t.Run("Objects", testObjectsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Namespaces", testNamespacesExists)
	t.Run("Objects", testObjectsExists)
}

func TestFind(t *testing.T) {
	t.Run("Namespaces", testNamespacesFind)
	t.Run("Objects", testObjectsFind)
}

func TestBind(t *testing.T) {
	t.Run("Namespaces", testNamespacesBind)
	t.Run("Objects", testObjectsBind)
}

func TestOne(t *testing.T) {
	t.Run("Namespaces", testNamespacesOne)
	t.Run("Objects", testObjectsOne)
}

func TestAll(t *testing.T) {
	t.Run("Namespaces", testNamespacesAll)
	t.Run("Objects", testObjectsAll)
}

func TestCount(t *testing.T) {
	t.Run("Namespaces", testNamespacesCount)
	t.Run("Objects", testObjectsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Namespaces", testNamespacesHooks)
	t.Run("Objects", testObjectsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Namespaces", testNamespacesInsert)
	t.Run("Namespaces", testNamespacesInsertWhitelist)
	t.Run("Objects", testObjectsInsert)
	t.Run("Objects", testObjectsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Namespaces", testNamespacesReload)
	t.Run("Objects", testObjectsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Namespaces", testNamespacesReloadAll)
	t.Run("Objects", testObjectsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Namespaces", testNamespacesSelect)
	t.Run("Objects", testObjectsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Namespaces", testNamespacesUpdate)
	t.Run("Objects", testObjectsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Namespaces", testNamespacesSliceUpdateAll)
	t.Run("Objects", testObjectsSliceUpdateAll)
}
